
name: 'portfolio_tracking'                   # project name, should reflect the intend of the models
version: '0.1.0'                             # configurable version of your project
config-version: 2                            # version of the dbt config used in this file

profile: 'default'                           # for dbt-core: the connection profile to use, from the config file

                                             # where dbt should look for different types of files.
model-paths: ["models"]
analysis-paths: ["analyses"]
test-paths: ["tests"]
seed-paths: ["seeds"]
macro-paths: ["macros"]
snapshot-paths: ["snapshots"]

target-path: "target"                        # directory which will store compiled SQL files
clean-targets:                               # directories to be removed by `dbt clean`
  - "target"
  - "dbt_packages"


# Configuring models: how they should be build (tabel, view)
  # Full documentation: https://docs.getdbt.com/docs/configuring-models
# These settings can be overridden in the individual model files
# using the `{{ config(...) }}` macro.
models:
  portfolio_tracking:                 # project
    +materialized: view
    staging:                          # folder 'models/staging': the data storage layer
      +materialized: view
      +schema: STAGING                # a custom schema
    refined:                          # folder 'models/refined': the Refined data layer
      +materialized: view
      +schema: REFINED                # a custom schema
    marts:                            # folder 'models/marts'  : data delivery layer
      portfolio:
        +materialized: table
        +schema: MART_PORTFOLIO       # a custom schema
snapshots:
  portfolio_tracking:
    +target_schema: SNAPSHOTS

seeds:                                # Configuring Seeds
  +schema: SEED_DATA                  # this is applied to all seeds, including the ones imported by other libraries
  portfolio_tracking:                 # seeds of our prj
    ABC_Bank_SECURITY_INFO:
      +column_types:
        LOAD_TS: TIMESTAMP 
      +post-hook:                     # SQL that runs after the creation of the model
        - "UPDATE {{ this }} SET LOAD_TS = '{{ run_started_at }}' WHERE LOAD_TS is null"
    EXCHANGE:
      +column_types:
        LOAD_TS: TIMESTAMP
        Open: TIME
        Open_UTC: TIME
        Close: TIME
        Close_UTC: TIME
        Zone: varchar(4)
      +post-hook:
        - "update {{ this }} SET LOAD_TS = '{{ run_started_at }}' where LOAD_TS is null"